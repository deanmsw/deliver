type User {
  id: Int
  email: String!
  firstName: String
  lastName: String
  password: String
  avatar: String
  username: String
  tel: Int
  routes: [Route]
  role: Role
  driver: Driver
  driverId: Int
  customer: Customer
  apiToken: String
}
enum Role {
  CUSTOMER
  DRIVER
}

type Location {
  id: ID!
  latitude: Float!
  longitude: Float!
}

input LocationInput {
  latitude: Float!
  longitude: Float!
}

type Route {
  id: Int
  title: String
  description: String
  # postedBy:   User
  # postedById: Int
  startLocation: Location
  endLocation: Location
  distance: Float
  duration: Int
  driver: Driver
  driverId: Int
  slug: String
  customerId: Int
  journeys: Journey
}

type Journey {
  id: Int
  customerId: Int
  customer: Customer
  routeId: Int
  route: Route
  startLocation: Location
  endLocation: Location
  distance: Float!
}

type Customer {
  id: Int
  userId: Int
  user: User
  journeys: [Journey]
}
type Driver {
  id: Int
  userId: Int
  user: User
  routes: [Route]
}

type AuthPayload {
  token: String
  user: User
}
type AuthToken {
  token: String!
}

type Query {
  allUsers: [User!]!
  User(email: String!): User!

  allRoutes: [Route!]!
  route(id: Int!): Route
}

input DriverObj {
  id: Int
  userId: Int
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createUser(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
  ): AuthPayload

  updateUser(
    email: String!
    password: String
    firstName: String
    lastName: String # driver: DriverObj
  ): User
  deleteUser(email: String!): User

  createRoute(
    title: String!
    description: String!
    driver: DriverObj
    driverId: Int!
    slug: String # customerId: Int # journeys: [Int]
    startLocation: LocationInput!
    endLocation: LocationInput!
    distance: Float
    duration: Int
  ): Route

  signIn(loginInput: LoginInput!): AuthPayload
  signOut: AuthToken
  deleteRoute(id: Int!): Route

  updateRoute(id: Int!, title: String, description: String): Route
}
